-- USING THE DATA WAREHOUSE NAMED AS FLATTEN_WAREHOUSE
USE WAREHOUSE FLATTEN_WAREHOUSE;

-- USING THE DATABASES NAMED AS FLATTEN_DATABASE
USE DATABASE FLATTEN_DATABASE;

-- USING THE SCHEMA NAMED AS FLATTEN_SCHEMA
USE SCHEMA FLATTEN_SCHEMA;

--CREATING THE STAGE NAMED AS STORE_STAGE 
CREATE 
OR REPLACE STAGE XML_STAGE COPY_OPTIONS =(on_error = 'skip_file');

-- SHOWING THE LIST OF STAGES
SHOW STAGES;

-- SHOWING THE FILES IN THE STAGES NAMED AS STORE_STAGE
LIST @XML_STAGE;

--CREATE A TABLE WITH A SINGLE VARIENT COLUMN NAMED AS XML_DATA
CREATE
OR REPLACE TABLE XML_DEPT_TABLE(
     XML_DEPT_DATA VARIANT NOT NULL
);



--  Employee - department
--           - address
--           - date

----PUT FILE://Fuse/snowfalke/snowsql_project/datas/dept.xml @XML_STAGE;

-- coping the data from the xml_stage to the created table 
COPY INTO XML_DEPT_TABLE
FROM @XML_STAGE/dept.xml.gz
FILE_FORMAT=(TYPE=XML) ON_ERROR='CONTINUE';

SELECT * FROM XML_DEPT_TABLE;

--Query to parse out EMPLOYEE DETAILS.
  SELECT
     GET( XMLGET( XML_DEPT_DATA, 'dept_id'), '$')::INTEGER as deptID,
     XMLGET( XML_DEPT_DATA, 'dept_name' ):"$"::STRING AS DEPT_NAME,
     XMLGET( XML_DEPT_DATA, 'employee' ):"$"::STRING AS EMPLOYEE_INFO
  FROM XML_DEPT_TABLE;
  
--CREATING TABLE NAMED AS DEPARTMENT
CREATE 
OR REPLACE TABLE "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."DEPARTMENT"(
    "DEPARTMENT_ID" INTEGER PRIMARY KEY,
    "DEPARTMENT_NAME" STRING
);

-- INSERTING THE VALUE TO EMPLOYEE TABLE
INSERT INTO  "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."DEPARTMENT"
  SELECT
     GET( XMLGET( XML_DEPT_DATA, 'dept_id'), '$')::INTEGER,
     XMLGET( XML_DEPT_DATA, 'dept_name' ):"$"::STRING
  FROM XML_DEPT_TABLE;

SELECT
* 
FROM "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."DEPARTMENT";
-- Query to parse out EM EMPLOYEE DETAILS.
SELECT
    XMLGET( EMP.VALUE, 'emp_id' ):"$"::INTEGER as EMP_ID,
    XMLGET( EMP.VALUE, 'emp_fname' ):"$"::STRING as FIRST_NAME,
    XMLGET( EMP.VALUE, 'emp_lname' ):"$"::STRING as LAST_NAME,
    XMLGET( EMP.VALUE, 'emp_title' ):"$"::STRING as TITLE,
    XMLGET( EMP.VALUE, 'emp_ssn' ):"$"::STRING as SSN
FROM
    XML_DEPT_TABLE,
    LATERAL FLATTEN(XML_DEPT_TABLE.XML_DEPT_DATA:"$") AS EMP
  WHERE GET( EMP.VALUE, '@') = 'employee';


--CREATING TABLE NAMED AS EMPLOYEE
CREATE 
OR REPLACE TABLE "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."EMPLOYEE"(
    "EMPLOYEE_ID" INTEGER PRIMARY KEY,
    "EMP_ID" INTEGER,
    "FIRST_NAME" STRING,
    "LAST_NAME" STRING,
    "TITLE" STRING,
    "SSN" STRING,
    "DEPARTMENT_ID" INTEGER FOREIGN KEY REFERENCES "DEPARTMENT",
    "ADDRESS_ID" INTEGER FOREIGN KEY REFERENCES "ADDRESS",
    "DATE_ID" INTEGER FOREIGN KEY REFERENCES "DATES"
);

-- INSERTING THE VALUE TO EMPLOYEE TABLE
INSERT INTO  "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."EMPLOYEE"
SELECT
    XMLGET( EMP.VALUE, 'emp_id' ):"$" INTEGER,
    HASH(EMP.VALUE),
    XMLGET( EMP.VALUE, 'emp_fname' ):"$" STRING,
    XMLGET( EMP.VALUE, 'emp_lname' ):"$" STRING,
    XMLGET( EMP.VALUE, 'emp_title' ):"$" STRING,
    XMLGET( EMP.VALUE, 'emp_ssn' ):"$" INTEGER,
    XMLGET(XML_DEPT_DATA,'dept_id'):"$" INTEGER,
    HASH(ADDR.VALUE),
    HASH(ADDR.VALUE)
FROM
    XML_DEPT_TABLE,
    LATERAL FLATTEN(XML_DEPT_DATA:"$") AS EMP,
    LATERAL FLATTEN( EMP.VALUE:"$" ) AS ADDR
    WHERE GET( EMP.VALUE, '@') = 'employee' AND GET( ADDR.VALUE, '@') = 'address';

SELECT
  *
FROM "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."EMPLOYEE";


-- Query to parse out  ADDRESS
SELECT
   XMLGET( ADDR.VALUE,'reet_1' ):"$"::STRING as STREET,
   XMLGET( ADDR.VALUE, 'city' ):"$"::STRING as CITY,
   XMLGET( ADDR.VALUE, 'state' ):"$"::STRING as STATE,
   XMLGET( ADDR.VALUE, 'zipcode' ):"$"::STRING as ZIPCODE
FROM
  XML_DEPT_TABLE,
  LATERAL FLATTEN( XML_DEPT_DATA:"$" ) AS EMP,
  LATERAL FLATTEN( EMP.VALUE:"$" ) AS ADDR
WHERE GET( ADDR.VALUE, '@') = 'address';

--CREATING TABLE NAMED AS ADDRESS
CREATE 
OR REPLACE TABLE "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."ADDRESS"(
    "ADDRESS_ID" INTEGER PRIMARY KEY,
    "CITY" STRING,
    "STATE" STRING,
    "ZIP_CODE" INTEGER
);

-- INSERTING THE VALUE TO ADDRESS TABLE
INSERT INTO  "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."ADDRESS"
SELECT
   HASH(ADDR.VALUE),
   XMLGET( ADDR.VALUE, 'city' ):"$"::STRING,
   XMLGET( ADDR.VALUE, 'state' ):"$"::STRING,
   XMLGET( ADDR.VALUE, 'zipcode' ):"$"::STRING
FROM
  XML_DEPT_TABLE,
  LATERAL FLATTEN( XML_DEPT_DATA:"$" ) AS EMP,
  LATERAL FLATTEN( EMP.VALUE:"$" ) AS ADDR
WHERE GET( ADDR.VALUE, '@') = 'address';

SELECT
  *
FROM "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."ADDRESS";


-- Query to parse out  DATE
SELECT
   XMLGET( ADDR.VALUE,'start_date' ):"$"::STRING as START_AT,
   XMLGET( ADDR.VALUE, 'end_date' ):"$"::STRING as END_AT
FROM
  XML_DEPT_TABLE,
  LATERAL FLATTEN( XML_DEPT_DATA:"$" ) AS EMP,
  LATERAL FLATTEN( EMP.VALUE:"$" ) AS ADDR
WHERE GET( ADDR.VALUE, '@') = 'address';

--CREATING TABLE NAMED AS QUESTION_ANSWER
CREATE 
OR REPLACE TABLE "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."DATES"(
    "DATE_ID" INTEGER PRIMARY KEY,
    "START_AT" STRING,
    "END_AT" STRING
);


-- INSERTING THE VALUE TO DATES TABLE
INSERT INTO  "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."DATES"
SELECT
   HASH(ADDR.VALUE),
   XMLGET( ADDR.VALUE,'start_date' ):"$"::STRING,
   XMLGET( ADDR.VALUE, 'end_date' ):"$"::STRING
FROM
  XML_DEPT_TABLE,
  LATERAL FLATTEN( XML_DEPT_DATA:"$" ) AS EMP,
  LATERAL FLATTEN( EMP.VALUE:"$" ) AS ADDR
WHERE GET( ADDR.VALUE, '@') = 'address';


SELECT
  *
FROM "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."DATES"

