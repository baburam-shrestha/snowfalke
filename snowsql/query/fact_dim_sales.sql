--CREATING THE DATA WAREHOUSE NAMED AS _WAREHOUSE
CREATE 
OR REPLACE WAREHOUSE SALES_WAREHOUSE;

-- USING THE DATA WAREHOUSE NAMED AS SALES_WAREHOUSE
USE WAREHOUSE SALES_WAREHOUSE;

--CREATING DATABASE NAMED AS SALES_DATABASE
CREATE 
OR REPLACE DATABASE SALES_DATABASE;

-- USING THE DATABASES NAMED AS SALES_DATABASE
USE DATABASE SALES_DATABASE;

--CREATING THE SCHEMA NAMED SALES _SCHEMA
CREATE 
OR REPLACE SCHEMA SALES_SCHEMA;

-- USING THE SCHEMA NAMED AS SALES_SCHEMA
USE SCHEMA SALES_SCHEMA;

--CREATING THE STAGE NAMED AS STORE_STAGE 
CREATE 
OR REPLACE STAGE SALE_STAGE 
COPY_OPTIONS =(on_error = 'skip_file');

-- SHOWING THE LIST OF STAGES
SHOW STAGES;
-- SHOWING THE FILES IN THE STAGES NAMED AS STORE_STAGE
LIST @SALE_STAGE;


-- FROM SNOWSQL COMMAND LINE:
-------------------------- # snowsql -a pprzfza-hi03530 -u fuseBaburam
-------------------------- # enter the password and hit enter

-------------------------- # PUT FILE://Fuse/snowfalke/snowsql_project/datas/SALES.csv @SALE_STAGE;   
-----------------------------------------------------------
--CREATING TABLE NAMED AS SALES
CREATE 
OR REPLACE TABLE "SALES_DATABASE"."SALES_SCHEMA"."SALES"(
  "SALE_ID" INTEGER, "ORDER_ID" STRING, 
  "ORDER_DATE" DATE, "SHIP_DATE" DATE, 
  "SHIP_MODE" STRING, "CUSTOMER_ID" STRING, 
  "CUSTOMER_NAME" STRING, "SEGMENT" STRING, 
  "COUNTRY" STRING, "CITY" STRING, "STATE" STRING, 
  "POSTAL_CODE" INTEGER, "REGION" STRING, 
  "PRODUCT_ID" STRING, "CATEGORY" STRING, 
  "SUB_CATEGORY" STRING, "PRODUCT_NAME" STRING, 
  "SALES" FLOAT
);

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."SALES";
  
--CREATING THE SCHEMA NAMED FACT_DIM_SCHEMA
CREATE 
OR REPLACE SCHEMA FACT_DIM_SCHEMA;
-- USING THE SCHEMA NAMED AS FACT_DIM_SCHEMA
USE SCHEMA FACT_DIM_SCHEMA;

ALTER FILE FORMAT "SALES_DATABASE"."SALES_SCHEMA".CSV_FILE_FORMAT 
SET COMPRESSION = 'AUTO' 
FIELD_DELIMITER = ',' 
RECORD_DELIMITER = '\n' 
SKIP_HEADER = 1 
FIELD_OPTIONALLY_ENCLOSED_BY = 'NONE' 
TRIM_SPACE = FALSE 
ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE 
ESCAPE = 'NONE' 
ESCAPE_UNENCLOSED_FIELD = '\134' 
DATE_FORMAT = 'AUTO' 
TIMESTAMP_FORMAT = 'AUTO' 
NULL_IF = ('\\N');

--COPYING  THE DATA FROM STAGE NAMED AS FEATURS_STAGE/Features_data_set.csv.gz TO  TABLE FEATURES 
--COPY INTO  "SALES_DATABASE"."SALES_SCHEMA"."SALES"
--FROM
--  @SALE_STAGE/SALES.csv.gz
--file_format =(format_name = CSV_FILE_FORMAT) on_error = 'continue';
  
--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."SALES";
  
------------------------------------------------------------------------------------------
--CREATING TABLE NAMED AS FACT_SALES
CREATE 
OR REPLACE TABLE "SALES_DATABASE"."SALES_SCHEMA"."FACT_SALES"(
  "SALE_ID" INTEGER, "ORDER_HAS_KEY" STRING, 
  "SHIP_HAS_KEY" STRING, "CUSTOMER_HAS_KEY" STRING, 
  "LOCATION_HAS_KEY" STRING, "PRODUCT_HAS_KEY" STRING
);

-- INSERTING THE VALUE FROM SALES TABLE TO FACT_SALES TABLE
INSERT INTO "SALES_DATABASE"."SALES_SCHEMA"."FACT_SALES" (
  "SALE_ID", "ORDER_HAS_KEY", "SHIP_HAS_KEY", 
  "CUSTOMER_HAS_KEY", "LOCATION_HAS_KEY", 
  "PRODUCT_HAS_KEY"
) 
SELECT 
  "SALE_ID", 
  HASH("ORDER_ID", "ORDER_DATE"), 
  HASH("SHIP_DATE", "SHIP_MODE"), 
  HASH("CUSTOMER_ID", "CUSTOMER_NAME"), 
  HASH("COUNTRY", "CITY", "STATE", "POSTAL_CODE"), 
  HASH("PRODUCT_ID", "PRODUCT_NAME") 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."SALES";
  
--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."FACT_SALES";
  
--STORES PROCEDURE TO COPY THE DATA FROM RAW SCHEMA TO TARGET SCHEMA
CREATE 
OR REPLACE PROCEDURE COPY_FACT_SALES()
RETURNS VARIANT 
LANGUAGE JAVASCRIPT 
EXECUTE AS CALLER AS 
$$ 
var return_rows = [];
var sql_command = 'CREATE TABLE "SALES_DATABASE"."FACT_DIM_SCHEMA"."FACT_SALES" CLONE "SALES_DATABASE"."SALES_SCHEMA"."FACT_SALES"' 
var sql_statement = snowflake.createStatement({ sqlText : sql_command });
var result = sql_statement.execute();
result.next();
return_rows.push(
  result.getColumnValue(1)
) 
return return_rows;
$$;

--CALLING THE PROCEDURE
CALL COPY_FACT_SALES();

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."FACT_DIM_SCHEMA"."FACT_SALES";

------------------------------------------------------------------------------------
--CREATING TABLE NAMED AS DIM_ORDER
CREATE 
OR REPLACE TABLE "SALES_DATABASE"."SALES_SCHEMA"."DIM_ORDER"(
    "ORDER_HAS_KEY" STRING,
    "ORDER_ID" STRING,
    "ORDER_DATE" DATE
);


-- INSERTING THE VALUE FROM SALES TABLE TO DIM_ORDER TABLE
INSERT INTO  "SALES_DATABASE"."SALES_SCHEMA"."DIM_ORDER" 
("ORDER_HAS_KEY","ORDER_ID","ORDER_DATE")
SELECT HASH("ORDER_ID","ORDER_DATE"),"ORDER_ID","ORDER_DATE"
FROM "SALES_DATABASE"."SALES_SCHEMA"."SALES";

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
    "SALES_DATABASE"."SALES_SCHEMA"."DIM_ORDER";

--STORES PROCEDURE TO COPY THE DATA FROM RAW SCHEMA TO TARGET SCHEMA
CREATE 
OR REPLACE PROCEDURE COPY_DIM_ORDER()
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
    var return_rows = [];
    var sql_command = 'CREATE TABLE "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_ORDER" CLONE "SALES_DATABASE"."SALES_SCHEMA"."DIM_ORDER"'
    var sql_statement = snowflake.createStatement({
        sqlText: sql_command
    });
    
    var result = sql_statement.execute();
    result.next();
    return_rows.push(result.getColumnValue(1))
    return return_rows;
$$
;
--CALLING THE PROCEDURE
CALL COPY_DIM_ORDER();

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM
    "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_ODER";

-----------------------------------------------------------------------------
--CREATING TABLE NAMED AS DIM_SHIP
CREATE 
OR REPLACE TABLE "SALES_DATABASE"."SALES_SCHEMA"."DIM_SHIP"(
  "SHIP_HAS_KEY" STRING, "SHIP_DATE" DATE, 
  "SHIP_MODE" STRING
);

-- INSERTING THE VALUE FROM SALES TABLE TO DIM_SHIP TABLE
INSERT INTO "SALES_DATABASE"."SALES_SCHEMA"."DIM_SHIP" (
  "SHIP_HAS_KEY", "SHIP_DATE", "SHIP_MODE"
) 
SELECT 
  HASH("SHIP_DATE", "SHIP_MODE"), 
  "SHIP_DATE", 
  "SHIP_MODE" 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."SALES";
--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."DIM_SHIP";
  
--STORES PROCEDURE TO COPY THE DATA FROM RAW SCHEMA TO TARGET SCHEMA
CREATE 
OR REPLACE PROCEDURE COPY_DIM_SHIP() 
RETURNS VARIANT 
LANGUAGE JAVASCRIPT 
EXECUTE AS CALLER AS 
$$ 
var return_rows = [];
var sql_command = 'CREATE TABLE "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_SHIP" CLONE "SALES_DATABASE"."SALES_SCHEMA"."DIM_SHIP"' 
var sql_statement = snowflake.createStatement({ sqlText : sql_command });
var result = sql_statement.execute();
result.next();
return_rows.push(
  result.getColumnValue(1)
) 
return return_rows;
$$;

--CALLING THE PROCEDURE
CALL COPY_DIM_SHIP();

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_SHIP";


---------------------------------------------------------------------------------------
--CREATING TABLE NAMED AS DIM_CUSTOMER
CREATE 
OR REPLACE TABLE "SALES_DATABASE"."SALES_SCHEMA"."DIM_CUSTOMER"(
  "CUSTOMER_HAS_KEY" STRING, "CUSTOMER_ID" STRING, 
  "CUSTOMER_NAME" STRING, "SEGMENT" STRING
);

-- INSERTING THE VALUE FROM SALES TABLE TO DIM_CUSTOMER TABLE
INSERT INTO "SALES_DATABASE"."SALES_SCHEMA"."DIM_CUSTOMER" (
  "CUSTOMER_HAS_KEY", "CUSTOMER_ID", 
  "CUSTOMER_NAME", "SEGMENT"
) 
SELECT 
  HASH("CUSTOMER_ID", "CUSTOMER_NAME"), 
  "CUSTOMER_ID", 
  "CUSTOMER_NAME", 
  "SEGMENT" 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."SALES";
  
--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."DIM_CUSTOMER";
  

--STORES PROCEDURE TO COPY THE DATA FROM RAW SCHEMA TO TARGET SCHEMA
CREATE 
OR REPLACE PROCEDURE COPY_DIM_CUSTOMER() 
RETURNS VARIANT 
LANGUAGE JAVASCRIPT 
EXECUTE AS CALLER AS 
$$ 
var return_rows = [];
var sql_command = 'CREATE TABLE "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_CUSTOMER" CLONE "SALES_DATABASE"."SALES_SCHEMA"."DIM_CUSTOMER"' 
var sql_statement = snowflake.createStatement({ sqlText : sql_command });
var result = sql_statement.execute();
result.next();
return_rows.push(
  result.getColumnValue(1)
) 
return return_rows;
$$;

--CALLING THE PROCEDURE
CALL COPY_DIM_CUSTOMER();

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_CUSTOMER";
  
----------------------------------------------------------------------------------------------  
--CREATING TABLE NAMED AS DIM_LOCATION
CREATE 
OR REPLACE TABLE "SALES_DATABASE"."SALES_SCHEMA"."DIM_LOCATION"(
  "LOCATION_HAS_KEY" STRING, "COUNTRY" STRING, 
  "CITY" STRING, "STATE" STRING, "POSTAL_CODE" INTEGER, 
  "REGION" STRING
);

-- INSERTING THE VALUE FROM SALES TABLE TO DIM_LOCATION TABLE
INSERT INTO "SALES_DATABASE"."SALES_SCHEMA"."DIM_LOCATION" (
  "LOCATION_HAS_KEY", "COUNTRY", "CITY", 
  "STATE", "POSTAL_CODE", "REGION"
) 
SELECT 
  HASH(
    "COUNTRY", "CITY", "STATE", "POSTAL_CODE"
  ), 
  "COUNTRY", 
  "CITY", 
  "STATE", 
  "POSTAL_CODE", 
  "REGION" 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."SALES";
  
--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."DIM_LOCATION";
  
--STORES PROCEDURE TO COPY THE DATA FROM RAW SCHEMA TO TARGET SCHEMA
CREATE 
OR REPLACE PROCEDURE COPY_DIM_LOCATION() 
RETURNS VARIANT 
LANGUAGE JAVASCRIPT 
EXECUTE AS CALLER AS 
$$ 
var return_rows = [];
var sql_command = 'CREATE TABLE "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_LOCATION" CLONE "SALES_DATABASE"."SALES_SCHEMA"."DIM_LOCATION"' 
var sql_statement = snowflake.createStatement({ sqlText : sql_command });
var result = sql_statement.execute();
result.next();
return_rows.push(
  result.getColumnValue(1)
) 
return return_rows;
$$;

--CALLING THE PROCEDURE
CALL COPY_DIM_LOCATION();

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_LOCATION";

---------------------------------------------------------------------------------------------------------------------------
--CREATING TABLE NAMED AS DIM_PRODUCT IN SALES_SCHEMA
CREATE 
OR REPLACE TABLE "SALES_DATABASE"."SALES_SCHEMA"."DIM_PRODUCT"(
  "PRODUCT_HAS_KEY" STRING, "PRODUCT_ID" STRING, 
  "CATEGORY" STRING, "SUB_CATEGORY" STRING, 
  "PRODUCT_NAME" STRING, "SALES" FLOAT
);

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."DIM_PRODUCT";
  
-- INSERTING THE VALUE FROM SALES TABLE TO DIM_PRODUCT TABLE
INSERT INTO "SALES_DATABASE"."SALES_SCHEMA"."DIM_PRODUCT" (
  "PRODUCT_HAS_KEY", "PRODUCT_ID", 
  "CATEGORY", "SUB_CATEGORY", "PRODUCT_NAME", 
  "SALES"
) 
SELECT 
  HASH("PRODUCT_ID", "PRODUCT_NAME"), 
  "PRODUCT_ID", 
  "CATEGORY", 
  "SUB_CATEGORY", 
  "PRODUCT_NAME", 
  "SALES" 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."SALES";
--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."SALES_SCHEMA"."DIM_PRODUCT";
  
--STORES PROCEDURE TO COPY THE DATA FROM RAW SCHEMA TO TARGET SCHEMA
CREATE 
OR REPLACE PROCEDURE COPY_DIM_PRODUCT() 
RETURNS VARIANT 
LANGUAGE JAVASCRIPT 
EXECUTE AS CALLER AS 
$$ 
var return_rows = [];
var sql_command = 'CREATE TABLE "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_PRODUCT" CLONE "SALES_DATABASE"."SALES_SCHEMA"."DIM_PRODUCT"' 
var sql_statement = snowflake.createStatement({ sqlText : sql_command });
var result = sql_statement.execute();
result.next();
return_rows.push(
  result.getColumnValue(1)
) 
return return_rows;
$$;
--CALLING THE PROCEDURE
CALL COPY_DIM_PRODUCT();

--SELECTING THE DATA FROM THE TABLE
SELECT 
  * 
FROM 
  "SALES_DATABASE"."FACT_DIM_SCHEMA"."DIM_PRODUCT";


