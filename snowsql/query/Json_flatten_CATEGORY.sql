--CREATING THE DATA WAREHOUSE NAMED AS FLATTEN_WAREHOUSE
CREATE 
OR REPLACE WAREHOUSE FLATTEN_WAREHOUSE;

-- USING THE DATA WAREHOUSE NAMED AS FLATTEN_WAREHOUSE
USE WAREHOUSE FLATTEN_WAREHOUSE;

--CREATING DATABASE NAMED AS FLATTEN_DATABASE
CREATE 
OR REPLACE DATABASE FLATTEN_DATABASE;

-- USING THE DATABASES NAMED AS FLATTEN_DATABASE
USE DATABASE FLATTEN_DATABASE;

--CREATING THE SCHEMA NAMED FLATTEN_SCHEMA
CREATE 
OR REPLACE SCHEMA FLATTEN_SCHEMA;

-- USING THE SCHEMA NAMED AS FLATTEN_SCHEMA
USE SCHEMA FLATTEN_SCHEMA;


-----------------------------------SECOND JSON FILE: CA_category_id.json -------------------------------------------
-- FROM SNOWSQL COMMAND LINE:
-------------------------- # snowsql -a pprzfza-hi03530 -u fuseBaburam
-------------------------- # enter the password and hit enter
-------------------------- # USE WAREHOUSE FLATTEN_WAREHOUSE;
-------------------------- # USE DATABASE FLATTEN_DATABASE;
-------------------------- # USE SCHEMA FLATTEN_SCHEMA;
-------------------------- # SHOW STAGES;
-------------------------- # LIST @CATEGORY_STAGE;

-------------------------- # PUT FILE://Fuse/snowfalke/snowsql_project/datas/json_flatten_quiz.json @CATEGORY_STAGE;   
--CREATING THE STAGE NAMED AS  CATEGORY_STAGE 
CREATE 
OR REPLACE STAGE CATEGORY_STAGE COPY_OPTIONS =(on_error = 'skip_file');

-- SHOWING THE LIST OF STAGES
SHOW STAGES;

-- SHOWING THE FILES IN THE STAGES NAMED AS CATEGORY_STAGE
LIST @CATEGORY_STAGE;
-- SELECTING THE DATA FROM STAGE NAMED AS CATEGORY_STAGE
SELECT * FROM @CATEGORY_STAGE/CA_category_id.json.gz;
-- GENERATES ERROR: SQL compilation error: error line 1 at position 0 SELECT with no columns

-- CREATE TABLE WITH VARIANT COLUMN TO STORE THE JSON FILE
CREATE OR REPLACE TABLE
CATEGORY_TABLE(CATEGORY VARIANT);


-- LOAD RAW DATA INTO UNFORMATTED TABLE NAMED AS CATEGORY_TABLE
COPY INTO CATEGORY_TABLE
FROM @CATEGORY_STAGE/CA_category_id.json.gz
FILE_FORMAT = (TYPE = JSON);

-- CHECK  BY SELECTING THE DATA FROM THE TABLE
SELECT * FROM CATEGORY_TABLE;


-- QUERY TABLE
SELECT 
CATEGORY
FROM CATEGORY_TABLE;

SELECT 
CATEGORY:category
FROM CATEGORY_TABLE;

-- QUERY QUERY NESTED DATA FROM TABEL (nesting)
SELECT 
CATEGORY:category:category2
FROM CATEGORY_TABLE;

SELECT 
CATEGORY:category:category2:item4
FROM CATEGORY_TABLE;

SELECT 
CATEGORY:category:category2:item4:snippet
FROM CATEGORY_TABLE;


SELECT 
CATEGORY:category:category2:item4:snippet:title
FROM CATEGORY_TABLE;



--  SEQ |  KEY | PATH | INDEX | VALUE | THIS 
SELECT *
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category);

SELECT *
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category:category3);

SELECT *
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category:category5:item5:snippet);



-- RECURSIVE FLATTEN TO SELECT ALL THE INFROMATION
SELECT *
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category, RECURSIVE => TRUE);

-- RECURSIVE FLATTEN TO SELECT ALL THE INFROMATION
SELECT *
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category:category2, RECURSIVE => TRUE);

SELECT *
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category:category3:item7, RECURSIVE => TRUE);

SELECT *
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category:category5:item3:snippet, RECURSIVE => TRUE);

SELECT *
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category:category5:item3:snippet:channelId, RECURSIVE => TRUE);

-- GET ALL snippet
SELECT
VALUE:snippet AS SNIPPET
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category, RECURSIVE => TRUE)
WHERE SNIPPET IS NOT NULL;


-- GET ALL item1
SELECT
VALUE:item2 AS FIRST_ITEM
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category, RECURSIVE => TRUE)
WHERE FIRST_ITEM IS NOT NULL;


-- GET ALL the details of  item1
SELECT
VALUE:item1 AS FIRST_ITEM,
VALUE:item1:etag E_TAG,
VALUE:item1:id ID,
VALUE:item1:kind KIND,
VALUE:item1:snippet:channelId CHANNEL_ID,
VALUE:item1:snippet:title TITLE,
VALUE:item1:snippet:assignable ASSIGNABLE
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category, RECURSIVE => TRUE)
WHERE FIRST_ITEM IS NOT NULL;



--CREATING TABLE NAMED AS SNIPPET
CREATE 
OR REPLACE TABLE "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."SNIPPET"(
    "SNIPPET_ID" INTEGER PRIMARY KEY,
    "CHANNEL_ID" STRING,
    "TITLE" STRING,
    "ASSIGNABLE" STRING
);


-- INSERTING THE VALUE FROM CATEGORY TABLE TO SNIPPET TABLE
INSERT INTO  "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."SNIPPET" 
("SNIPPET_ID","CHANNEL_ID","TITLE","ASSIGNABLE" )
SELECT HASH(VALUE:snippet) ,
VALUE:snippet:channelId AS ID,
VALUE:snippet:title,
VALUE:snippet:assignable
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category, RECURSIVE => TRUE)
WHERE ID IS NOT NULL;

SELECT
  *
FROM "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."SNIPPET";


--CREATING TABLE NAMED AS ITEM
CREATE 
OR REPLACE TABLE "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."ITEM"(
    "ITEM_ID" STRING PRIMARY KEY,
    "SNIPPET_ID" INTEGER,
    "KIND" STRING,
    "E_TAG" STRING
);

-- INSERTING THE VALUE FROM CATEGORY TABLE TO ITEM TABLE
INSERT INTO  "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."ITEM" 
("ITEM_ID","SNIPPET_ID","KIND","E_TAG")
SELECT
VALUE:id AS ID,
HASH(VALUE:snippet) ,
VALUE:kind,
VALUE:etag
FROM CATEGORY_TABLE,
LATERAL FLATTEN(INPUT => CATEGORY:category, RECURSIVE => TRUE)
WHERE ID IS NOT NULL;

SELECT
  *
FROM "FLATTEN_DATABASE"."FLATTEN_SCHEMA"."ITEM";

