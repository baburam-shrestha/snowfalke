--CREATING THE DATA WAREHOUSE NAMED AS STAGE_WAREHOUSE
CREATE 
OR REPLACE WAREHOUSE STAGE_WAREHOUSE;

-- USING THE DATA WAREHOUSE NAMED AS STAGE_WAREHOUSE
USE WAREHOUSE STAGE_WAREHOUSE;

--CREATING DATABASE NAMED AS STAGE_DATABASE
CREATE 
OR REPLACE DATABASE STAGE_DATABASE;

-- USING THE DATABASES NAMED AS STAGE_DATABASE
USE DATABASE STAGE_DATABASE;

--CREATING THE SCHEMA NAMED AS STAGE_SCHEMA
CREATE 
OR REPLACE SCHEMA STAGE_SCHEMA;

-- USING THE SCHEMA NAMED AS STAGE_SCHEMA
USE SCHEMA STAGE_SCHEMA;

--CREATING THE STAGE NAMED AS STORE_STAGE 
CREATE 
OR REPLACE STAGE STORE_STAGE COPY_OPTIONS =(on_error = 'skip_file');

-- SHOWING THE LIST OF STAGES
SHOW STAGES;

-- SHOWING THE FILES IN THE STAGES NAMED AS STORE_STAGE
LIST @STORE_STAGE;

-- put file://Fuse/dataWarehousing/stages/stores_data_set.csv @STORE_STAGE;   from snowsql command

--selecting the data from the stage names as STORE_STAGE
SELECT 
  T.$1 STORE_ID, 
  T.$2 TYPE, 
  T.$3 SIZE 
FROM 
  @STORE_STAGE / stores_data_set.csv.gz (file_format => CSV_FILE_FORMAT) T;
  
SELECT 
  T.$1 STORE_ID, 
  T.$2 TYPE, 
  T.$3 SIZE 
FROM 
  @STORE_STAGE / stores_data_set.csv.gz (file_format => CSV_FILE_FORMAT) T 
WHERE 
  SIZE > 10000 
  AND TYPE = 'A' 
ORDER BY 
  SIZE 
LIMIT 
  10;
  
--CREATING TABLE STORES 
CREATE 
OR REPLACE TABLE "STAGE_DATABASE"."STAGE_SCHEMA"."STORES"(
  "STORE_ID" INTEGER, "TYPE" STRING, 
  "SIZE" INTEGER
);

--SELECTING THE DATA FROM TABLE STORES 
SELECT 
  * 
FROM 
  "STAGE_DATABASE"."STAGE_SCHEMA"."STORES";
  
-- put file://Fuse/dataWarehousing/stages/sales_data_set.csv @STORE_STAGE;   from snowsql command

--CREATING TABLE SALES 
CREATE 
OR REPLACE TABLE "STAGE_DATABASE"."STAGE_SCHEMA"."SALES"(
  "STORE" INTEGER, "DEPT" INTEGER, "DATE" DATE, 
  "WEEKLY_SALES" FLOAT, "ISHOLIDAY" STRING
);

--SELECTING THE DATA FROM TABLE SALES 
SELECT 
  * 
FROM 
  "STAGE_DATABASE"."STAGE_SCHEMA"."SALES";
  
--CREATING THE STAGE NAMED AS FEATURS_STAGE 
CREATE 
OR REPLACE STAGE FEATURS_STAGE COPY_OPTIONS =(on_error = 'skip_file');

-- put file://Fuse/dataWarehousing/stages/Features_data_set.csv @FEATURS_STAGE;  from snowsql command

-- SHOWING THE LIST OF STAGES
SHOW STAGES;

-- SHOWING THE FILES IN THE STAGES NAMED AS FEATURS_STAGE
LIST @FEATURS_STAGE;

--CREATING TABLE FEATURES 
CREATE 
OR REPLACE TABLE "STAGE_DATABASE"."STAGE_SCHEMA"."FEATURES"(
  "STORE" INTEGER, "DATE" STRING, "TEMPERATURE" FLOAT, 
  "FUEL_PRICE" FLOAT, "MARKDOWN1" STRING, 
  "MARKDOWN2" STRING, "MARKDOWN3" STRING, 
  "MARKDOWN4" STRING, "MARKDOWN5" STRING, 
  "CPI" STRING, "UNEMPLOYMENT" STRING, 
  "ISHOLIDAY" STRING
);

--SELECTING THE DATA FROM TABLE FEATURES 
SELECT 
  * 
FROM 
  "STAGE_DATABASE"."STAGE_SCHEMA"."FEATURES";
  
--COPYING  THE DATA FROM STAGE NAMED AS FEATURS_STAGE/Features_data_set.csv.gz TO  TABLE FEATURES 
COPY INTO "STAGE_DATABASE"."STAGE_SCHEMA"."FEATURES" 
FROM 
  @FEATURS_STAGE / Features_data_set.csv.gz file_format =(format_name = CSV_FILE_FORMAT) on_error = 'continue';
  
  
--SELECTING THE DATA FROM TABLE FEATURES 
SELECT 
  * 
FROM 
  "STAGE_DATABASE"."STAGE_SCHEMA"."FEATURES";
  
--SELECTING THE DATA FROM TABLE FEATURES 
SELECT 
  T.$1 STORE, 
  T.$2 DATE, 
  T.$3 TEMPERATURE, 
  T.$4 FUEL_PRICE, 
  T.$5, 
  T.$6, 
  T.$7, 
  T.$8, 
  T.$9, 
  T.$10 CPI, 
  T.$11, 
  T.$12 ISHOLIDAY 
FROM 
  @FEATURS_STAGE / Features_data_set.csv.gz (file_format => CSV_FILE_FORMAT) T 
WHERE 
  FUEL_PRICE > 3 
ORDER BY 
  TEMPERATURE 
LIMIT 
  10;
  
  
--CREATING THE TABLE FEATURES_DOLLOR 
CREATE 
OR REPLACE TABLE "STAGE_DATABASE"."STAGE_SCHEMA"."FEATURES_DOLLOR" AS(
  SELECT 
    T.$1 STORE, 
    T.$2 DATE, 
    T.$3 TEMPERATURE, 
    T.$4 FUEL_PRICE, 
    T.$5, 
    T.$6, 
    T.$7, 
    T.$8, 
    T.$9, 
    T.$10 CPI, 
    T.$11, 
    T.$12 ISHOLIDAY 
  FROM 
    @FEATURS_STAGE / Features_data_set.csv.gz (file_format => CSV_FILE_FORMAT) T 
  WHERE 
    FUEL_PRICE > 3 
  ORDER BY 
    TEMPERATURE
);


--SELECTING THE DATA FROM TABLE FEATURES_DOLLOR 
SELECT 
  * 
FROM 
  "STAGE_DATABASE"."STAGE_SCHEMA"."FEATURES_DOLLOR";
  
  
------------------------------------------------VIEWS--------------------------------------------
-- CREATING VIEW BY JOINING THE STORE AND FEATURES TABLE TOGETHER
CREATE 
OR REPLACE VIEW "STAGE_DATABASE"."STAGE_SCHEMA"."STORE_SALES_VIEW" AS(
  SELECT 
    * 
  FROM 
    "STAGE_DATABASE"."STAGE_SCHEMA"."STORES" AS ST 
    INNER JOIN "STAGE_DATABASE"."STAGE_SCHEMA"."SALES" AS SA ON ST."STORE_ID" = SA."STORE" 
);

-- SELECTING THE DATA FROM VIEW NAMED AS STORE_SALES_VIEW  BY JOINING THE STORE AND SALES TABLE TOGETHER
SELECT 
  STORE_ID, 
  TYPE, 
  SIZE, 
  DEPT, 
  DATE, 
  WEEKLY_SALES, 
  ISHOLIDAY 
FROM 
  "STAGE_DATABASE"."STAGE_SCHEMA"."STORE_SALES_VIEW";
-- CREATING VIEW BY JOINING THE STORE AND SALES TABLE TOGETHER
CREATE 
OR REPLACE VIEW "STAGE_DATABASE"."STAGE_SCHEMA"."STORE_FEATURES_VIEW" AS(
  SELECT 
    * 
  FROM 
    "STAGE_DATABASE"."STAGE_SCHEMA"."STORES" AS ST 
    INNER JOIN "STAGE_DATABASE"."STAGE_SCHEMA"."FEATURES" AS FE ON ST."STORE_ID" = FE."STORE"
);

-- SELECTING THE DATA FROM VIEW NAMED AS STORE_FEATURES_VIEW  BY JOINING THE STORE AND FEATURES TABLE TOGETHER
SELECT 
  STORE_ID, 
  TYPE, 
  SIZE, 
  DATE, 
  TEMPERATURE, 
  FUEL_PRICE, 
  CPI, 
  ISHOLIDAY 
FROM 
  "STAGE_DATABASE"."STAGE_SCHEMA"."STORE_FEATURES_VIEW" 
WHERE 
  CPI > 100 
  AND CPI != 'NA' 
ORDER BY 
  CPI;

