--CREATING THE DATA WAREHOUSE NAMED AS TASK_WAREHOUSE
CREATE 
OR REPLACE WAREHOUSE TASK_WAREHOUSE;

-- USING THE DATA WAREHOUSE NAMED AS TASK_WAREHOUSE
USE WAREHOUSE TASK_WAREHOUSE;

--CREATING DATABASE NAMED AS TASK_DATABASE
CREATE 
OR REPLACE DATABASE TASK_DATABASE;

-- USING THE DATABASES NAMED AS TASK_DATABASE
USE DATABASE TASK_DATABASE;

--CREATING THE SCHEMA NAMED AS TASK_SCHEMA
CREATE 
OR REPLACE SCHEMA TASK_SCHEMA;

-- USING THE SCHEMA NAMED AS STAGE_SCHEMA
USE SCHEMA TASK_SCHEMA;

--CREATING TABLE SALARY
CREATE 
OR REPLACE TABLE "TASK_DATABASE"."TASK_SCHEMA"."SALARY"(
  "ID" INTEGER, "WORK_YEAR" INTEGER, 
  "EXPERIENCE_LEVEL" STRING, "EMPLOYMENT_TYPE" STRING, 
  "JOB_TITLE" STRING, "SALARY_AMOUNT" INTEGER, 
  "SALARY_CURRENCY" STRING, "SALARY_IN_USD" INTEGER, 
  "EMPLOYEE_RESIDENCE" STRING, "REMOTE_RATIO" INTEGER, 
  "COMPANY_LOCATION" STRING, "COMPANY_SIZE" STRING
);

--selecting the data from SALARY table
SELECT 
  * 
FROM 
  "TASK_DATABASE"."TASK_SCHEMA"."SALARY";
  
--CREATING THE STAGE NAMED AS TASK_STAGE 
CREATE 
OR REPLACE STAGE TASK_STAGE COPY_OPTIONS =(on_error = 'skip_file');

-- SHOWING THE LIST OF STAGES
SHOW STAGES;

-- SHOWING THE FILES IN THE STAGES NAMED AS TASK_STAGE
LIST @TASK_STAGE;

--------------------------- from snowsql command--------------------
-- USE WAREHOUSE TASK_WAREHOUSE;
-- USE DATABASE TASK_DATABASE;
-- USE SCHEMA TASK_SCHEMA;
-- and finally
-- PUT file://Fuse/dataWarehousing/salary/ds_salaries.csv @TASK_STAGE;

--selecting the data from the stage names as STORE_STAGE
SELECT 
  T.$1 ID, 
  T.$2 WORK_YEAR, 
  T.$3 EXPERIENCE_LEVEL, 
  T.$4 EMPLOYMENT_TYPE, 
  T.$5 JOB_TITLE, 
  T.$6 SALARY_AMOUNT, 
  T.$7 SALARY_CURRENCY, 
  T.$8 SALARY_IN_USD, 
  T.$9 EMPLOYEE_RESIDENCE, 
  T.$10 REMOTE_RATIO, 
  T.$11 COMPANY_LOCATION, 
  T.$12 COMPANY_SIZE 
FROM 
  @TASK_STAGE / ds_salaries.csv.gz (file_format => CSV_FILE_FORMAT) T;
  
  
--CREATING TABLE STAGE_SALARY FROM THA STAGE
CREATE 
OR REPLACE TABLE "TASK_DATABASE"."TASK_SCHEMA"."STAGE_SALARY" AS(
  SELECT 
    T.$1 ID, 
    T.$2 WORK_YEAR, 
    T.$3 EXPERIENCE_LEVEL, 
    T.$4 EMPLOYMENT_TYPE, 
    T.$5 JOB_TITLE, 
    T.$6 SALARY_AMOUNT, 
    T.$7 SALARY_CURRENCY, 
    T.$8 SALARY_IN_USD, 
    T.$9 EMPLOYEE_RESIDENCE, 
    T.$10 REMOTE_RATIO, 
    T.$11 COMPANY_LOCATION, 
    T.$12 COMPANY_SIZE 
  FROM 
    @TASK_STAGE / ds_salaries.csv.gz (file_format => CSV_FILE_FORMAT) T
);


--selecting the data from STAGE_SALARY table
SELECT 
  * 
FROM 
  "TASK_DATABASE"."TASK_SCHEMA"."STAGE_SALARY";
  
  
------------------------- CREATING THE TASK-------------------------------------
--CREATING TABLE TASK_SALARY
CREATE 
OR REPLACE TABLE "TASK_DATABASE"."TASK_SCHEMA"."TASK_SALARY"(
  "ID" INTEGER, "WORK_YEAR" INTEGER, 
  "EXPERIENCE_LEVEL" STRING, "EMPLOYMENT_TYPE" STRING, 
  "JOB_TITLE" STRING, "SALARY_AMOUNT" INTEGER, 
  "SALARY_CURRENCY" STRING, "SALARY_IN_USD" INTEGER, 
  "EMPLOYEE_RESIDENCE" STRING, "REMOTE_RATIO" INTEGER, 
  "COMPANY_LOCATION" STRING, "COMPANY_SIZE" STRING
);


--SELECTING THE DATA FROM TASK_SALARY TABLE
SELECT 
  * 
FROM 
  "TASK_DATABASE"."TASK_SCHEMA"."TASK_SALARY";
  
  
--CREATING THE TASK THAT INSERT THE DATA FROM TASK_STAGE TO TASK_SALARY TABLE IN EVERY 1 MINUTE
CREATE 
OR REPLACE TASK ADD_DATA_TO_TASK_SALARY WAREHOUSE = TASK_WAREHOUSE SCHEDULE = 'USING CRON */1 * * * * America/Los_Angeles' AS INSERT INTO "TASK_DATABASE"."TASK_SCHEMA"."TASK_SALARY" 
SELECT 
  T.$1 ID, 
  T.$2 WORK_YEAR, 
  T.$3 EXPERIENCE_LEVEL, 
  T.$4 EMPLOYMENT_TYPE, 
  T.$5 JOB_TITLE, 
  T.$6 SALARY_AMOUNT, 
  T.$7 SALARY_CURRENCY, 
  T.$8 SALARY_IN_USD, 
  T.$9 EMPLOYEE_RESIDENCE, 
  T.$10 REMOTE_RATIO, 
  T.$11 COMPANY_LOCATION, 
  T.$12 COMPANY_SIZE 
FROM 
  @TASK_STAGE / ds_salaries.csv.gz (file_format => CSV_FILE_FORMAT) T;
  
-- ALTER THE TASK TO RESUME
ALTER TASK ADD_DATA_TO_TASK_SALARY RESUME;

-- ALTER THE TASK TO SUSPEND
ALTER TASK ADD_DATA_TO_TASK_SALARY SUSPEND;

--TO SEE THE TASK HISTORY
SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME=>'ADD_DATA_TO_TASK_SALARY'));

--SELECTING THE DATA FROM TASK_SALARY TABLE
SELECT 
  * 
FROM 
  "TASK_DATABASE"."TASK_SCHEMA"."TASK_SALARY";

